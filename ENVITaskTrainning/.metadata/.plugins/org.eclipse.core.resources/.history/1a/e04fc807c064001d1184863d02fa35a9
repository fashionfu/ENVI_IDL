PRO test_Burn_Area_Extraction
  COMPILE_OPT idl2
  e=ENVI()

  ;第一和第二时相数据
  path = FILE_DIRNAME(ROUTINE_FILEPATH())+'\data\'
  inputFile1 = path+'LS8_2013_08_15_RadCalReflectance_PreFire.dat'
  inputFile2 = path+'LS8_2013_09_16_RadCalReflectance_PostFire.dat'
  slopeFile  = path+'RimFire_Slope_Subset.dat'

  ;输出文件路径
  outputFile = e.GetTemporaryFilename(/cleanup_on_exit)
  PRINT, outputFile

  Raster1 = e.OpenRaster(inputFile1)
  Raster2 = e.OpenRaster(inputFile2)

  View = e.GetView()
  Layer1 = View.CreateLayer(Raster1)
  Layer2 = View.CreateLayer(Raster2)
  View.Zoom, 1, /FULL_EXTENT

  ;计算NBR
  Index = 'NBR'
  Subset1 = ENVISpectralIndexRaster(Raster1, Index)
  Subset2 = ENVISpectralIndexRaster(Raster2, Index)

  ;初始化波段差值Task
  ImageBandDiffTask = ENVITask('ImageBandDifference')
  ;定义输入参数，并执行
  ImageBandDiffTask.INPUT_RASTER1 = Subset2
  ImageBandDiffTask.INPUT_RASTER2 = Subset1
  ImageBandDiffTask.EXECUTE

  ;密度分割
  ;"Low severity burn: 0.1 to 0.27"
  ;"Moderate-low severity burn: 0.27 to 0.44"
  ;"Moderate-high severity burn: 0.44 to 0.66"
  ;"High severity burn: >0.66"
  CLASS_RANGES = [[0.1,0.27],[0.27,0.44],[0.44,0.66],[0.66,100]]
  CLASS_COLORS = [[94,220,13],[0,82,254],[255,230,0],[255,0,16]]
  ;  CLASS_NAMES = ["Background", "Low severity burn: 0.1 to 0.27", $
  ;    "Moderate-low severity burn: 0.27 to 0.44",    $
  ;    "Moderate-high severity burn: 0.44 to 0.66",   $
  ;    "High severity burn: >0.66"]

  CLASS_NAMES = ['背景','轻度','中度','高度','重度']

  ColorSliceTask = ENVITask('ColorSliceClassification')
  ColorSliceTask.INPUT_RASTER = ImageBandDiffTask.OUTPUT_RASTER
  ColorSliceTask.CLASS_RANGES = CLASS_RANGES
  ColorSliceTask.CLASS_COLORS = CLASS_COLORS
  ColorSliceTask.Execute
  ;更新元数据信息
  ColorSliceTask.OUTPUT_RASTER.METADATA.UpdateItem,$
    'CLASS NAMES', CLASS_NAMES

  ;使用坡度数据，掩膜掉平缓区域
  ;获取坡度和临时结果的重叠区（目的为获取相同行列号和空间分辨率的数据）
  slopeRaster = e.OpenRaster(slopeFile)
  IntersectTask = ENVITask('ImageIntersection')
  IntersectTask.INPUT_RASTER1 = ColorSliceTask.OUTPUT_RASTER
  IntersectTask.INPUT_RASTER2 = slopeRaster
  IntersectTask.Execute

  ;获取掩膜文件，并应用掩膜
  maskRaster = ENVIBinaryGTThresholdRaster(IntersectTask.OUTPUT_RASTER2, 15)
  maskTask = ENVITask('MaskRaster')
  maskTask.DATA_IGNORE_VALUE = 0
  maskTask.INPUT_MASK_RASTER = maskRaster
  maskTask.INPUT_RASTER = IntersectTask.OUTPUT_RASTER1
  maskTask.Execute

  ;初始化平滑Task
  SmoothTask=ENVITask('ClassificationSmoothing')
  ;定义输入参数，并执行
  SmoothTask.INPUT_RASTER = maskTask.OUTPUT_RASTER
  SmoothTask.KERNEL_SIZE = 3
  SmoothTask.EXECUTE

  ;初始化聚类Task
  AggregationTask=ENVITask('ClassificationAggregation')
  ;定义输入参数
  AggregationTask.INPUT_RASTER = SmoothTask.OUTPUT_RASTER
  AggregationTask.MINIMUM_SIZE = 50
  AggregationTask.OUTPUT_RASTER_URI = outputFile
  AggregationTask.Execute
  
  ;设置背景值透明
  AggregationTask.OUTPUT_RASTER.METADATA.AddItem, 'data ignore value', 0
  AggregationTask.OUTPUT_RASTER.WriteMetadata
  
  ;统计不同类别面积
  ClassStatistics_and_Barplot, AggregationTask.OUTPUT_RASTER, [1,2,3,4]

  ;加载变化检测栅格结果
  e.Data.Add, AggregationTask.OUTPUT_RASTER
  Layer3 = View.CreateLayer(AggregationTask.OUTPUT_RASTER)

  ;  ;输出矢量结果
  ;  dotPos = STRPOS(outputFile, '.', /REVERSE_SEARCH)
  ;  outVectorFile = dotPos NE -1 ? STRMID(outputFile, 0, dotPos)+'.shp' : outputFile+'.shp'
  ;  ;初始化Task，栅格转矢量
  ;  ClassToVectorTask = ENVITask('ClassificationToShapefile')
  ;  ;设置输入参数
  ;  ClassToVectorTask.INPUT_RASTER = AggregationTask.OUTPUT_RASTER
  ;  ClassToVectorTask.OUTPUT_VECTOR_URI = outVectorFile
  ;
  ;  ClassToVectorTask.EXECUTE
  ;
  ;  ;加载变化检测矢量结果
  ;  Layer4 = View.CreateLayer(ClassToVectorTask.OUTPUT_VECTOR)
END